//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from MyGrammer.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class MyGrammerLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		STARTPROGRAM=1, ENDPROGRAM=2, INT=3, IF=4, ELSEIF=5, ELSE=6, FOR=7, INCREASE=8, 
		DECREASE=9, PRINTT=10, ID=11, STRING=12, NUMBER=13, ASSIGNMENT=14, LIFT=15, 
		RIGHT=16, BEGIN=17, PLUS=18, MINUS=19, DIV=20, MUL=21, MOD=22, NEWLINE=23, 
		END=24, SEMI=25, COMMA=26, GT=27, LT=28, GTORE=29, LTORE=30, EQUAL=31, 
		NOTEQUAL=32, BREAKE=33, WS=34, INVALID=35;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"STARTPROGRAM", "ENDPROGRAM", "INT", "IF", "ELSEIF", "ELSE", "FOR", "INCREASE", 
		"DECREASE", "PRINTT", "ID", "STRING", "NUMBER", "ASSIGNMENT", "LIFT", 
		"RIGHT", "BEGIN", "PLUS", "MINUS", "DIV", "MUL", "MOD", "NEWLINE", "END", 
		"SEMI", "COMMA", "GT", "LT", "GTORE", "LTORE", "EQUAL", "NOTEQUAL", "BREAKE", 
		"WS", "INVALID"
	};


	public MyGrammerLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public MyGrammerLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'StartP'", "'EndP'", "'int'", "'if'", "'elseif'", "'else'", "'for'", 
		"'++'", "'--'", "'print'", null, null, null, "'='", "'('", "')'", "'{'", 
		"'+'", "'-'", "'/'", "'*'", "'%'", "'\\n'", "'}'", "';'", "','", "'>'", 
		"'<'", "'>='", "'<='", "'=='", "'!='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "STARTPROGRAM", "ENDPROGRAM", "INT", "IF", "ELSEIF", "ELSE", "FOR", 
		"INCREASE", "DECREASE", "PRINTT", "ID", "STRING", "NUMBER", "ASSIGNMENT", 
		"LIFT", "RIGHT", "BEGIN", "PLUS", "MINUS", "DIV", "MUL", "MOD", "NEWLINE", 
		"END", "SEMI", "COMMA", "GT", "LT", "GTORE", "LTORE", "EQUAL", "NOTEQUAL", 
		"BREAKE", "WS", "INVALID"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MyGrammer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MyGrammerLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,35,194,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,1,0,1,
		0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,3,1,3,1,3,
		1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,
		7,1,7,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,5,10,121,8,10,10,10,
		12,10,124,9,10,1,11,1,11,1,11,1,11,5,11,130,8,11,10,11,12,11,133,9,11,
		1,11,1,11,1,12,4,12,138,8,12,11,12,12,12,139,1,13,1,13,1,14,1,14,1,15,
		1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,
		1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,28,
		1,29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,33,4,33,187,8,
		33,11,33,12,33,188,1,33,1,33,1,34,1,34,0,0,35,1,1,3,2,5,3,7,4,9,5,11,6,
		13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,
		19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,
		31,63,32,65,33,67,34,69,35,1,0,6,3,0,65,90,95,95,97,122,4,0,48,57,65,90,
		95,95,97,122,2,0,34,34,92,92,1,0,48,57,4,0,97,98,101,101,107,107,114,114,
		3,0,9,10,13,13,32,32,198,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,
		0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,
		1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,
		0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,
		1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,
		0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,
		1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,1,71,1,0,0,0,3,78,1,0,0,
		0,5,83,1,0,0,0,7,87,1,0,0,0,9,90,1,0,0,0,11,97,1,0,0,0,13,102,1,0,0,0,
		15,106,1,0,0,0,17,109,1,0,0,0,19,112,1,0,0,0,21,118,1,0,0,0,23,125,1,0,
		0,0,25,137,1,0,0,0,27,141,1,0,0,0,29,143,1,0,0,0,31,145,1,0,0,0,33,147,
		1,0,0,0,35,149,1,0,0,0,37,151,1,0,0,0,39,153,1,0,0,0,41,155,1,0,0,0,43,
		157,1,0,0,0,45,159,1,0,0,0,47,161,1,0,0,0,49,163,1,0,0,0,51,165,1,0,0,
		0,53,167,1,0,0,0,55,169,1,0,0,0,57,171,1,0,0,0,59,174,1,0,0,0,61,177,1,
		0,0,0,63,180,1,0,0,0,65,183,1,0,0,0,67,186,1,0,0,0,69,192,1,0,0,0,71,72,
		5,83,0,0,72,73,5,116,0,0,73,74,5,97,0,0,74,75,5,114,0,0,75,76,5,116,0,
		0,76,77,5,80,0,0,77,2,1,0,0,0,78,79,5,69,0,0,79,80,5,110,0,0,80,81,5,100,
		0,0,81,82,5,80,0,0,82,4,1,0,0,0,83,84,5,105,0,0,84,85,5,110,0,0,85,86,
		5,116,0,0,86,6,1,0,0,0,87,88,5,105,0,0,88,89,5,102,0,0,89,8,1,0,0,0,90,
		91,5,101,0,0,91,92,5,108,0,0,92,93,5,115,0,0,93,94,5,101,0,0,94,95,5,105,
		0,0,95,96,5,102,0,0,96,10,1,0,0,0,97,98,5,101,0,0,98,99,5,108,0,0,99,100,
		5,115,0,0,100,101,5,101,0,0,101,12,1,0,0,0,102,103,5,102,0,0,103,104,5,
		111,0,0,104,105,5,114,0,0,105,14,1,0,0,0,106,107,5,43,0,0,107,108,5,43,
		0,0,108,16,1,0,0,0,109,110,5,45,0,0,110,111,5,45,0,0,111,18,1,0,0,0,112,
		113,5,112,0,0,113,114,5,114,0,0,114,115,5,105,0,0,115,116,5,110,0,0,116,
		117,5,116,0,0,117,20,1,0,0,0,118,122,7,0,0,0,119,121,7,1,0,0,120,119,1,
		0,0,0,121,124,1,0,0,0,122,120,1,0,0,0,122,123,1,0,0,0,123,22,1,0,0,0,124,
		122,1,0,0,0,125,131,5,34,0,0,126,130,8,2,0,0,127,128,5,92,0,0,128,130,
		9,0,0,0,129,126,1,0,0,0,129,127,1,0,0,0,130,133,1,0,0,0,131,129,1,0,0,
		0,131,132,1,0,0,0,132,134,1,0,0,0,133,131,1,0,0,0,134,135,5,34,0,0,135,
		24,1,0,0,0,136,138,7,3,0,0,137,136,1,0,0,0,138,139,1,0,0,0,139,137,1,0,
		0,0,139,140,1,0,0,0,140,26,1,0,0,0,141,142,5,61,0,0,142,28,1,0,0,0,143,
		144,5,40,0,0,144,30,1,0,0,0,145,146,5,41,0,0,146,32,1,0,0,0,147,148,5,
		123,0,0,148,34,1,0,0,0,149,150,5,43,0,0,150,36,1,0,0,0,151,152,5,45,0,
		0,152,38,1,0,0,0,153,154,5,47,0,0,154,40,1,0,0,0,155,156,5,42,0,0,156,
		42,1,0,0,0,157,158,5,37,0,0,158,44,1,0,0,0,159,160,5,10,0,0,160,46,1,0,
		0,0,161,162,5,125,0,0,162,48,1,0,0,0,163,164,5,59,0,0,164,50,1,0,0,0,165,
		166,5,44,0,0,166,52,1,0,0,0,167,168,5,62,0,0,168,54,1,0,0,0,169,170,5,
		60,0,0,170,56,1,0,0,0,171,172,5,62,0,0,172,173,5,61,0,0,173,58,1,0,0,0,
		174,175,5,60,0,0,175,176,5,61,0,0,176,60,1,0,0,0,177,178,5,61,0,0,178,
		179,5,61,0,0,179,62,1,0,0,0,180,181,5,33,0,0,181,182,5,61,0,0,182,64,1,
		0,0,0,183,184,7,4,0,0,184,66,1,0,0,0,185,187,7,5,0,0,186,185,1,0,0,0,187,
		188,1,0,0,0,188,186,1,0,0,0,188,189,1,0,0,0,189,190,1,0,0,0,190,191,6,
		33,0,0,191,68,1,0,0,0,192,193,9,0,0,0,193,70,1,0,0,0,6,0,122,129,131,139,
		188,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
