//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from MyGrammer.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class MyGrammerParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		STARTPROGRAM=1, ENDPROGRAM=2, INT=3, IF=4, ELSEIF=5, ELSE=6, FOR=7, INCREASE=8, 
		DECREASE=9, PRINTT=10, ID=11, STRING=12, NUMBER=13, ASSIGNMENT=14, LIFT=15, 
		RIGHT=16, BEGIN=17, PLUS=18, MINUS=19, DIV=20, MUL=21, MOD=22, NEWLINE=23, 
		END=24, SEMI=25, COMMA=26, GT=27, LT=28, GTORE=29, LTORE=30, EQUAL=31, 
		NOTEQUAL=32, BREAKE=33, WS=34, INVALID=35;
	public const int
		RULE_program = 0, RULE_declarlist = 1, RULE_forStatement = 2, RULE_ifStatement = 3, 
		RULE_elseifStatement = 4, RULE_elseStatement = 5, RULE_declar = 6, RULE_declar2 = 7, 
		RULE_firstPart = 8, RULE_lastPart = 9, RULE_condition = 10, RULE_statements = 11, 
		RULE_prints = 12, RULE_expr = 13, RULE_term = 14, RULE_factor = 15;
	public static readonly string[] ruleNames = {
		"program", "declarlist", "forStatement", "ifStatement", "elseifStatement", 
		"elseStatement", "declar", "declar2", "firstPart", "lastPart", "condition", 
		"statements", "prints", "expr", "term", "factor"
	};

	private static readonly string[] _LiteralNames = {
		null, "'StartP'", "'EndP'", "'int'", "'if'", "'elseif'", "'else'", "'for'", 
		"'++'", "'--'", "'print'", null, null, null, "'='", "'('", "')'", "'{'", 
		"'+'", "'-'", "'/'", "'*'", "'%'", "'\\n'", "'}'", "';'", "','", "'>'", 
		"'<'", "'>='", "'<='", "'=='", "'!='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "STARTPROGRAM", "ENDPROGRAM", "INT", "IF", "ELSEIF", "ELSE", "FOR", 
		"INCREASE", "DECREASE", "PRINTT", "ID", "STRING", "NUMBER", "ASSIGNMENT", 
		"LIFT", "RIGHT", "BEGIN", "PLUS", "MINUS", "DIV", "MUL", "MOD", "NEWLINE", 
		"END", "SEMI", "COMMA", "GT", "LT", "GTORE", "LTORE", "EQUAL", "NOTEQUAL", 
		"BREAKE", "WS", "INVALID"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MyGrammer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MyGrammerParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MyGrammerParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MyGrammerParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STARTPROGRAM() { return GetToken(MyGrammerParser.STARTPROGRAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDPROGRAM() { return GetToken(MyGrammerParser.ENDPROGRAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementsContext[] statements() {
			return GetRuleContexts<StatementsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementsContext statements(int i) {
			return GetRuleContext<StatementsContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammerListener typedListener = listener as IMyGrammerListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammerListener typedListener = listener as IMyGrammerListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammerVisitor<TResult> typedVisitor = visitor as IMyGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 32;
			Match(STARTPROGRAM);
			State = 36;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1176L) != 0)) {
				{
				{
				State = 33;
				statements();
				}
				}
				State = 38;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 39;
			Match(ENDPROGRAM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarContext declar() {
			return GetRuleContext<DeclarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MyGrammerParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MyGrammerParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MyGrammerParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Declar2Context[] declar2() {
			return GetRuleContexts<Declar2Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Declar2Context declar2(int i) {
			return GetRuleContext<Declar2Context>(i);
		}
		public DeclarlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammerListener typedListener = listener as IMyGrammerListener;
			if (typedListener != null) typedListener.EnterDeclarlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammerListener typedListener = listener as IMyGrammerListener;
			if (typedListener != null) typedListener.ExitDeclarlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammerVisitor<TResult> typedVisitor = visitor as IMyGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarlistContext declarlist() {
		DeclarlistContext _localctx = new DeclarlistContext(Context, State);
		EnterRule(_localctx, 2, RULE_declarlist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 41;
			declar();
			State = 46;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 42;
				Match(COMMA);
				State = 43;
				declar2();
				}
				}
				State = 48;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 49;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MyGrammerParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIFT() { return GetToken(MyGrammerParser.LIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(MyGrammerParser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(MyGrammerParser.SEMI, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT() { return GetToken(MyGrammerParser.RIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN() { return GetToken(MyGrammerParser.BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(MyGrammerParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FirstPartContext firstPart() {
			return GetRuleContext<FirstPartContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LastPartContext lastPart() {
			return GetRuleContext<LastPartContext>(0);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammerListener typedListener = listener as IMyGrammerListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammerListener typedListener = listener as IMyGrammerListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammerVisitor<TResult> typedVisitor = visitor as IMyGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_forStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 51;
			Match(FOR);
			State = 52;
			Match(LIFT);
			State = 54;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INT || _la==ID) {
				{
				State = 53;
				firstPart();
				}
			}

			State = 56;
			Match(SEMI);
			State = 58;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 43008L) != 0)) {
				{
				State = 57;
				condition();
				}
			}

			State = 60;
			Match(SEMI);
			State = 62;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ID) {
				{
				State = 61;
				lastPart();
				}
			}

			State = 64;
			Match(RIGHT);
			State = 65;
			Match(BEGIN);
			State = 66;
			statements();
			State = 67;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(MyGrammerParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIFT() { return GetToken(MyGrammerParser.LIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT() { return GetToken(MyGrammerParser.RIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN() { return GetToken(MyGrammerParser.BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(MyGrammerParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElseifStatementContext[] elseifStatement() {
			return GetRuleContexts<ElseifStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseifStatementContext elseifStatement(int i) {
			return GetRuleContext<ElseifStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseStatementContext elseStatement() {
			return GetRuleContext<ElseStatementContext>(0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammerListener typedListener = listener as IMyGrammerListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammerListener typedListener = listener as IMyGrammerListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammerVisitor<TResult> typedVisitor = visitor as IMyGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_ifStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 69;
			Match(IF);
			State = 70;
			Match(LIFT);
			State = 71;
			condition();
			State = 72;
			Match(RIGHT);
			State = 73;
			Match(BEGIN);
			State = 74;
			statements();
			State = 75;
			Match(END);
			State = 79;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ELSEIF) {
				{
				{
				State = 76;
				elseifStatement();
				}
				}
				State = 81;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 83;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 82;
				elseStatement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseifStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSEIF() { return GetToken(MyGrammerParser.ELSEIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIFT() { return GetToken(MyGrammerParser.LIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT() { return GetToken(MyGrammerParser.RIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN() { return GetToken(MyGrammerParser.BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(MyGrammerParser.END, 0); }
		public ElseifStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammerListener typedListener = listener as IMyGrammerListener;
			if (typedListener != null) typedListener.EnterElseifStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammerListener typedListener = listener as IMyGrammerListener;
			if (typedListener != null) typedListener.ExitElseifStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammerVisitor<TResult> typedVisitor = visitor as IMyGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseifStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseifStatementContext elseifStatement() {
		ElseifStatementContext _localctx = new ElseifStatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_elseifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 85;
			Match(ELSEIF);
			State = 86;
			Match(LIFT);
			State = 87;
			condition();
			State = 88;
			Match(RIGHT);
			State = 89;
			Match(BEGIN);
			State = 90;
			statements();
			State = 91;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(MyGrammerParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN() { return GetToken(MyGrammerParser.BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(MyGrammerParser.END, 0); }
		public ElseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammerListener typedListener = listener as IMyGrammerListener;
			if (typedListener != null) typedListener.EnterElseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammerListener typedListener = listener as IMyGrammerListener;
			if (typedListener != null) typedListener.ExitElseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammerVisitor<TResult> typedVisitor = visitor as IMyGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseStatementContext elseStatement() {
		ElseStatementContext _localctx = new ElseStatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_elseStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93;
			Match(ELSE);
			State = 94;
			Match(BEGIN);
			State = 95;
			statements();
			State = 96;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(MyGrammerParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MyGrammerParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(MyGrammerParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public DeclarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declar; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammerListener typedListener = listener as IMyGrammerListener;
			if (typedListener != null) typedListener.EnterDeclar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammerListener typedListener = listener as IMyGrammerListener;
			if (typedListener != null) typedListener.ExitDeclar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammerVisitor<TResult> typedVisitor = visitor as IMyGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarContext declar() {
		DeclarContext _localctx = new DeclarContext(Context, State);
		EnterRule(_localctx, 12, RULE_declar);
		try {
			State = 104;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 98;
				Match(INT);
				State = 99;
				Match(ID);
				State = 100;
				Match(ASSIGNMENT);
				State = 101;
				expr(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 102;
				Match(INT);
				State = 103;
				Match(ID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declar2Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MyGrammerParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(MyGrammerParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Declar2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declar2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammerListener typedListener = listener as IMyGrammerListener;
			if (typedListener != null) typedListener.EnterDeclar2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammerListener typedListener = listener as IMyGrammerListener;
			if (typedListener != null) typedListener.ExitDeclar2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammerVisitor<TResult> typedVisitor = visitor as IMyGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclar2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Declar2Context declar2() {
		Declar2Context _localctx = new Declar2Context(Context, State);
		EnterRule(_localctx, 14, RULE_declar2);
		try {
			State = 110;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 106;
				Match(ID);
				State = 107;
				Match(ASSIGNMENT);
				State = 108;
				expr(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 109;
				Match(ID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FirstPartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(MyGrammerParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MyGrammerParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(MyGrammerParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public FirstPartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_firstPart; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammerListener typedListener = listener as IMyGrammerListener;
			if (typedListener != null) typedListener.EnterFirstPart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammerListener typedListener = listener as IMyGrammerListener;
			if (typedListener != null) typedListener.ExitFirstPart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammerVisitor<TResult> typedVisitor = visitor as IMyGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFirstPart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FirstPartContext firstPart() {
		FirstPartContext _localctx = new FirstPartContext(Context, State);
		EnterRule(_localctx, 16, RULE_firstPart);
		try {
			State = 119;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 112;
				Match(INT);
				State = 113;
				Match(ID);
				State = 114;
				Match(ASSIGNMENT);
				State = 115;
				expr(0);
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 116;
				Match(ID);
				State = 117;
				Match(ASSIGNMENT);
				State = 118;
				expr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LastPartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MyGrammerParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCREASE() { return GetToken(MyGrammerParser.INCREASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECREASE() { return GetToken(MyGrammerParser.DECREASE, 0); }
		public LastPartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lastPart; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammerListener typedListener = listener as IMyGrammerListener;
			if (typedListener != null) typedListener.EnterLastPart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammerListener typedListener = listener as IMyGrammerListener;
			if (typedListener != null) typedListener.ExitLastPart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammerVisitor<TResult> typedVisitor = visitor as IMyGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLastPart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LastPartContext lastPart() {
		LastPartContext _localctx = new LastPartContext(Context, State);
		EnterRule(_localctx, 18, RULE_lastPart);
		try {
			State = 125;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 121;
				Match(ID);
				State = 122;
				Match(INCREASE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 123;
				Match(ID);
				State = 124;
				Match(DECREASE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(MyGrammerParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(MyGrammerParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTORE() { return GetToken(MyGrammerParser.GTORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTORE() { return GetToken(MyGrammerParser.LTORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(MyGrammerParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTEQUAL() { return GetToken(MyGrammerParser.NOTEQUAL, 0); }
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammerListener typedListener = listener as IMyGrammerListener;
			if (typedListener != null) typedListener.EnterCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammerListener typedListener = listener as IMyGrammerListener;
			if (typedListener != null) typedListener.ExitCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammerVisitor<TResult> typedVisitor = visitor as IMyGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 20, RULE_condition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127;
			expr(0);
			State = 128;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 8455716864L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 129;
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarlistContext declarlist() {
			return GetRuleContext<DeclarlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintsContext prints() {
			return GetRuleContext<PrintsContext>(0);
		}
		public StatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammerListener typedListener = listener as IMyGrammerListener;
			if (typedListener != null) typedListener.EnterStatements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammerListener typedListener = listener as IMyGrammerListener;
			if (typedListener != null) typedListener.ExitStatements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammerVisitor<TResult> typedVisitor = visitor as IMyGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementsContext statements() {
		StatementsContext _localctx = new StatementsContext(Context, State);
		EnterRule(_localctx, 22, RULE_statements);
		try {
			State = 135;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 131;
				declarlist();
				}
				break;
			case FOR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 132;
				forStatement();
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 3);
				{
				State = 133;
				ifStatement();
				}
				break;
			case PRINTT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 134;
				prints();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINTT() { return GetToken(MyGrammerParser.PRINTT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIFT() { return GetToken(MyGrammerParser.LIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT() { return GetToken(MyGrammerParser.RIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MyGrammerParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(MyGrammerParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(MyGrammerParser.COMMA, 0); }
		public PrintsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prints; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammerListener typedListener = listener as IMyGrammerListener;
			if (typedListener != null) typedListener.EnterPrints(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammerListener typedListener = listener as IMyGrammerListener;
			if (typedListener != null) typedListener.ExitPrints(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammerVisitor<TResult> typedVisitor = visitor as IMyGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrints(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintsContext prints() {
		PrintsContext _localctx = new PrintsContext(Context, State);
		EnterRule(_localctx, 24, RULE_prints);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 137;
			Match(PRINTT);
			State = 138;
			Match(LIFT);
			State = 141;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
				{
				State = 139;
				Match(STRING);
				}
				break;
			case ID:
			case NUMBER:
			case LIFT:
				{
				State = 140;
				expr(0);
				}
				break;
			case RIGHT:
			case COMMA:
				break;
			default:
				break;
			}
			State = 145;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 143;
				Match(COMMA);
				State = 144;
				expr(0);
				}
			}

			State = 147;
			Match(RIGHT);
			State = 148;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(MyGrammerParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(MyGrammerParser.MINUS, 0); }
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammerListener typedListener = listener as IMyGrammerListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammerListener typedListener = listener as IMyGrammerListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammerVisitor<TResult> typedVisitor = visitor as IMyGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 26;
		EnterRecursionRule(_localctx, 26, RULE_expr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 151;
			term(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 161;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 159;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
					case 1:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 153;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 154;
						Match(PLUS);
						State = 155;
						term(0);
						}
						break;
					case 2:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 156;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 157;
						Match(MINUS);
						State = 158;
						term(0);
						}
						break;
					}
					} 
				}
				State = 163;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL() { return GetToken(MyGrammerParser.MUL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(MyGrammerParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(MyGrammerParser.MOD, 0); }
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammerListener typedListener = listener as IMyGrammerListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammerListener typedListener = listener as IMyGrammerListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammerVisitor<TResult> typedVisitor = visitor as IMyGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		return term(0);
	}

	private TermContext term(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TermContext _localctx = new TermContext(Context, _parentState);
		TermContext _prevctx = _localctx;
		int _startState = 28;
		EnterRecursionRule(_localctx, 28, RULE_term, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 165;
			factor();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 178;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 176;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
					case 1:
						{
						_localctx = new TermContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_term);
						State = 167;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 168;
						Match(MUL);
						State = 169;
						factor();
						}
						break;
					case 2:
						{
						_localctx = new TermContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_term);
						State = 170;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 171;
						Match(DIV);
						State = 172;
						factor();
						}
						break;
					case 3:
						{
						_localctx = new TermContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_term);
						State = 173;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 174;
						Match(MOD);
						State = 175;
						factor();
						}
						break;
					}
					} 
				}
				State = 180;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(MyGrammerParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIFT() { return GetToken(MyGrammerParser.LIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT() { return GetToken(MyGrammerParser.RIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MyGrammerParser.ID, 0); }
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammerListener typedListener = listener as IMyGrammerListener;
			if (typedListener != null) typedListener.EnterFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammerListener typedListener = listener as IMyGrammerListener;
			if (typedListener != null) typedListener.ExitFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammerVisitor<TResult> typedVisitor = visitor as IMyGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 30, RULE_factor);
		try {
			State = 187;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 181;
				Match(NUMBER);
				}
				break;
			case LIFT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 182;
				Match(LIFT);
				State = 183;
				expr(0);
				State = 184;
				Match(RIGHT);
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 3);
				{
				State = 186;
				Match(ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 13: return expr_sempred((ExprContext)_localctx, predIndex);
		case 14: return term_sempred((TermContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 3);
		case 1: return Precpred(Context, 2);
		}
		return true;
	}
	private bool term_sempred(TermContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 4);
		case 3: return Precpred(Context, 3);
		case 4: return Precpred(Context, 2);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,35,190,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,1,0,1,0,5,0,35,8,0,10,0,12,0,38,9,0,1,0,1,0,1,1,1,1,1,1,5,1,
		45,8,1,10,1,12,1,48,9,1,1,1,1,1,1,2,1,2,1,2,3,2,55,8,2,1,2,1,2,3,2,59,
		8,2,1,2,1,2,3,2,63,8,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
		1,3,5,3,78,8,3,10,3,12,3,81,9,3,1,3,3,3,84,8,3,1,4,1,4,1,4,1,4,1,4,1,4,
		1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,3,6,105,8,6,1,7,1,
		7,1,7,1,7,3,7,111,8,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,120,8,8,1,9,1,9,
		1,9,1,9,3,9,126,8,9,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,3,11,136,8,
		11,1,12,1,12,1,12,1,12,3,12,142,8,12,1,12,1,12,3,12,146,8,12,1,12,1,12,
		1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,5,13,160,8,13,10,13,
		12,13,163,9,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
		1,14,5,14,177,8,14,10,14,12,14,180,9,14,1,15,1,15,1,15,1,15,1,15,1,15,
		3,15,188,8,15,1,15,0,2,26,28,16,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,
		30,0,1,1,0,27,32,197,0,32,1,0,0,0,2,41,1,0,0,0,4,51,1,0,0,0,6,69,1,0,0,
		0,8,85,1,0,0,0,10,93,1,0,0,0,12,104,1,0,0,0,14,110,1,0,0,0,16,119,1,0,
		0,0,18,125,1,0,0,0,20,127,1,0,0,0,22,135,1,0,0,0,24,137,1,0,0,0,26,150,
		1,0,0,0,28,164,1,0,0,0,30,187,1,0,0,0,32,36,5,1,0,0,33,35,3,22,11,0,34,
		33,1,0,0,0,35,38,1,0,0,0,36,34,1,0,0,0,36,37,1,0,0,0,37,39,1,0,0,0,38,
		36,1,0,0,0,39,40,5,2,0,0,40,1,1,0,0,0,41,46,3,12,6,0,42,43,5,26,0,0,43,
		45,3,14,7,0,44,42,1,0,0,0,45,48,1,0,0,0,46,44,1,0,0,0,46,47,1,0,0,0,47,
		49,1,0,0,0,48,46,1,0,0,0,49,50,5,25,0,0,50,3,1,0,0,0,51,52,5,7,0,0,52,
		54,5,15,0,0,53,55,3,16,8,0,54,53,1,0,0,0,54,55,1,0,0,0,55,56,1,0,0,0,56,
		58,5,25,0,0,57,59,3,20,10,0,58,57,1,0,0,0,58,59,1,0,0,0,59,60,1,0,0,0,
		60,62,5,25,0,0,61,63,3,18,9,0,62,61,1,0,0,0,62,63,1,0,0,0,63,64,1,0,0,
		0,64,65,5,16,0,0,65,66,5,17,0,0,66,67,3,22,11,0,67,68,5,24,0,0,68,5,1,
		0,0,0,69,70,5,4,0,0,70,71,5,15,0,0,71,72,3,20,10,0,72,73,5,16,0,0,73,74,
		5,17,0,0,74,75,3,22,11,0,75,79,5,24,0,0,76,78,3,8,4,0,77,76,1,0,0,0,78,
		81,1,0,0,0,79,77,1,0,0,0,79,80,1,0,0,0,80,83,1,0,0,0,81,79,1,0,0,0,82,
		84,3,10,5,0,83,82,1,0,0,0,83,84,1,0,0,0,84,7,1,0,0,0,85,86,5,5,0,0,86,
		87,5,15,0,0,87,88,3,20,10,0,88,89,5,16,0,0,89,90,5,17,0,0,90,91,3,22,11,
		0,91,92,5,24,0,0,92,9,1,0,0,0,93,94,5,6,0,0,94,95,5,17,0,0,95,96,3,22,
		11,0,96,97,5,24,0,0,97,11,1,0,0,0,98,99,5,3,0,0,99,100,5,11,0,0,100,101,
		5,14,0,0,101,105,3,26,13,0,102,103,5,3,0,0,103,105,5,11,0,0,104,98,1,0,
		0,0,104,102,1,0,0,0,105,13,1,0,0,0,106,107,5,11,0,0,107,108,5,14,0,0,108,
		111,3,26,13,0,109,111,5,11,0,0,110,106,1,0,0,0,110,109,1,0,0,0,111,15,
		1,0,0,0,112,113,5,3,0,0,113,114,5,11,0,0,114,115,5,14,0,0,115,120,3,26,
		13,0,116,117,5,11,0,0,117,118,5,14,0,0,118,120,3,26,13,0,119,112,1,0,0,
		0,119,116,1,0,0,0,120,17,1,0,0,0,121,122,5,11,0,0,122,126,5,8,0,0,123,
		124,5,11,0,0,124,126,5,9,0,0,125,121,1,0,0,0,125,123,1,0,0,0,126,19,1,
		0,0,0,127,128,3,26,13,0,128,129,7,0,0,0,129,130,3,26,13,0,130,21,1,0,0,
		0,131,136,3,2,1,0,132,136,3,4,2,0,133,136,3,6,3,0,134,136,3,24,12,0,135,
		131,1,0,0,0,135,132,1,0,0,0,135,133,1,0,0,0,135,134,1,0,0,0,136,23,1,0,
		0,0,137,138,5,10,0,0,138,141,5,15,0,0,139,142,5,12,0,0,140,142,3,26,13,
		0,141,139,1,0,0,0,141,140,1,0,0,0,141,142,1,0,0,0,142,145,1,0,0,0,143,
		144,5,26,0,0,144,146,3,26,13,0,145,143,1,0,0,0,145,146,1,0,0,0,146,147,
		1,0,0,0,147,148,5,16,0,0,148,149,5,25,0,0,149,25,1,0,0,0,150,151,6,13,
		-1,0,151,152,3,28,14,0,152,161,1,0,0,0,153,154,10,3,0,0,154,155,5,18,0,
		0,155,160,3,28,14,0,156,157,10,2,0,0,157,158,5,19,0,0,158,160,3,28,14,
		0,159,153,1,0,0,0,159,156,1,0,0,0,160,163,1,0,0,0,161,159,1,0,0,0,161,
		162,1,0,0,0,162,27,1,0,0,0,163,161,1,0,0,0,164,165,6,14,-1,0,165,166,3,
		30,15,0,166,178,1,0,0,0,167,168,10,4,0,0,168,169,5,21,0,0,169,177,3,30,
		15,0,170,171,10,3,0,0,171,172,5,20,0,0,172,177,3,30,15,0,173,174,10,2,
		0,0,174,175,5,22,0,0,175,177,3,30,15,0,176,167,1,0,0,0,176,170,1,0,0,0,
		176,173,1,0,0,0,177,180,1,0,0,0,178,176,1,0,0,0,178,179,1,0,0,0,179,29,
		1,0,0,0,180,178,1,0,0,0,181,188,5,13,0,0,182,183,5,15,0,0,183,184,3,26,
		13,0,184,185,5,16,0,0,185,188,1,0,0,0,186,188,5,11,0,0,187,181,1,0,0,0,
		187,182,1,0,0,0,187,186,1,0,0,0,188,31,1,0,0,0,19,36,46,54,58,62,79,83,
		104,110,119,125,135,141,145,159,161,176,178,187
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
